import com.badmanners.build.Plugin
import com.badmanners.build.publish.PublishPluginTask

allprojects {

    ext {
        config = [
                minSdk    : 21,
                sdk       : 30,
                buildTools: '30.0.3'
        ]

        versions = [
                murglar: '0.64',
                android_build_tools: '4.2.2'
        ]

        libs = [
                murglar_core       : "com.badmanners:murglar.lib.core:$versions.murglar",
                android_build_tools: "com.android.tools.build:gradle:$versions.android_build_tools",
                junit              : "junit:junit:4.13.2",
                test_runner        : "androidx.test:runner:1.3.0"
        ]
    }


    buildscript {
        repositories {
            google()
            mavenCentral()
        }
        dependencies {
            classpath libs.android_build_tools
        }
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url localProperties().myMavenRepoReadUrl
        }
        mavenLocal()
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

def configurePluginModule(Project project, Plugin plugin) {
    configure(project, {

        println "Configure android plugin module: $project"

        apply plugin: 'com.android.application'

        def localProperties = localProperties()

        android {
            compileSdkVersion config.sdk
            buildToolsVersion config.buildTools

            defaultConfig {
                applicationId plugin.appId

                versionCode plugin.version
                versionName plugin.fullVersion

                minSdkVersion config.minSdk
                targetSdkVersion config.sdk

                manifestPlaceholders = [
                        pluginId          : plugin.id,
                        pluginName        : plugin.name,
                        pluginFullName    : plugin.fullName,
                        pluginMurglarClass: plugin.murglarClass,
                        pluginVersion     : plugin.version,
                        pluginLibVersion  : plugin.libVersion
                ]

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            signingConfigs {
                signingConfig {
                    keyAlias localProperties.keyAlias
                    keyPassword localProperties.keyPassword
                    storeFile rootProject.file(localProperties.storeFile)
                    storePassword localProperties.storePassword
                }
            }

            applicationVariants.all {
                it.outputs.all {
                    outputFileName = plugin.apkName
                }
            }

            buildTypes {
                debug {
                    signingConfig signingConfigs.signingConfig
                }
                release {
                    signingConfig signingConfigs.signingConfig
                    minifyEnabled true
                    proguardFiles getDefaultProguardFile('proguard-android.txt')
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation this.project('core')

            compileOnly libs.murglar_core

            testImplementation libs.junit
            androidTestImplementation libs.test_runner
        }

        task publish(type: PublishPluginTask, dependsOn: 'assembleRelease') {
            it.plugin = plugin
            githubRepo = localProperties.githubRepo
            githubToken = localProperties.githubToken
            indexFile = rootProject.file("index/index.json")
        }

        println "Configuration complete: $project"
    })
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

Properties localProperties() {
    def propertiesFile = rootProject.file("local.properties")
    if (!propertiesFile.exists())
        throw new GradleException("No local.properties found!")
    def props = new Properties()
    propertiesFile.withInputStream { props.load(it) }
    return props
}